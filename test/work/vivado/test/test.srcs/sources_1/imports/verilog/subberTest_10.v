/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module subberTest_10 (
    input clk,
    input rst,
    input button,
    output reg [7:0] checkoff,
    output reg [3:0] flag,
    output reg [15:0] s
  );
  
  
  
  wire [16-1:0] M_fa_s;
  wire [1-1:0] M_fa_z;
  wire [1-1:0] M_fa_v;
  wire [1-1:0] M_fa_n;
  reg [16-1:0] M_fa_x;
  reg [16-1:0] M_fa_y;
  reg [6-1:0] M_fa_op;
  sixteen_bit_full_adder_17 fa (
    .x(M_fa_x),
    .y(M_fa_y),
    .op(M_fa_op),
    .s(M_fa_s),
    .z(M_fa_z),
    .v(M_fa_v),
    .n(M_fa_n)
  );
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_9 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  reg [7:0] M_checkoff_reg_d, M_checkoff_reg_q = 1'h0;
  reg [3:0] M_flag_reg_d, M_flag_reg_q = 1'h0;
  reg [15:0] M_s_reg_d, M_s_reg_q = 1'h0;
  localparam START_testCase = 3'd0;
  localparam PPP_testCase = 3'd1;
  localparam NPN_testCase = 3'd2;
  localparam PP0_testCase = 3'd3;
  localparam NPV_testCase = 3'd4;
  localparam ERR_testCase = 3'd5;
  localparam END_testCase = 3'd6;
  localparam ERROR_STATE_testCase = 3'd7;
  
  reg [2:0] M_testCase_d, M_testCase_q = START_testCase;
  
  localparam PPP_X = 16'h4f34;
  
  localparam PPP_ALUFN = 6'h01;
  
  localparam PPP_Y = 16'h2321;
  
  localparam PPP_S = 16'h2c13;
  
  localparam PPP_Z = 1'h0;
  
  localparam PPP_V = 1'h0;
  
  localparam PPP_N = 1'h0;
  
  localparam NPN_X = 16'hfff0;
  
  localparam NPN_ALUFN = 6'h01;
  
  localparam NPN_Y = 16'h0001;
  
  localparam NPN_S = 16'hffef;
  
  localparam NPN_Z = 1'h0;
  
  localparam NPN_V = 1'h0;
  
  localparam NPN_N = 1'h1;
  
  localparam PP0_X = 16'hc001;
  
  localparam PP0_ALUFN = 6'h01;
  
  localparam PP0_Y = 16'hc001;
  
  localparam PP0_S = 1'h0;
  
  localparam PP0_Z = 1'h1;
  
  localparam PP0_V = 1'h0;
  
  localparam PP0_N = 1'h0;
  
  localparam NPV_X = 16'h9f22;
  
  localparam NPV_ALUFN = 6'h01;
  
  localparam NPV_Y = 16'h2ff3;
  
  localparam NPV_S = 16'h6f2f;
  
  localparam NPV_Z = 1'h0;
  
  localparam NPV_V = 1'h1;
  
  localparam NPV_N = 1'h0;
  
  localparam ERR_X = 16'h0001;
  
  localparam ERR_ALUFN = 6'h01;
  
  localparam ERR_Y = 16'h0001;
  
  localparam ERR_S = 16'h000f;
  
  localparam ERR_Z = 1'h0;
  
  localparam ERR_V = 1'h1;
  
  localparam ERR_N = 1'h1;
  
  always @* begin
    M_testCase_d = M_testCase_q;
    M_flag_reg_d = M_flag_reg_q;
    M_s_reg_d = M_s_reg_q;
    M_checkoff_reg_d = M_checkoff_reg_q;
    
    checkoff = M_checkoff_reg_q;
    flag = M_flag_reg_q;
    s = M_s_reg_q;
    M_fa_x = 1'h0;
    M_fa_y = 1'h0;
    M_fa_op = 1'h0;
    M_edge_detector_in = button;
    
    case (M_testCase_q)
      START_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h50bb;
        M_checkoff_reg_d = 16'h0000;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = PPP_testCase;
        end
      end
      PPP_testCase: begin
        M_fa_x = 16'h4f34;
        M_fa_y = 16'h2321;
        M_fa_op = 6'h01;
        M_checkoff_reg_d[7+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = (M_fa_z != 1'h0);
        M_flag_reg_d[2+0-:1] = (M_fa_v != 1'h0);
        M_flag_reg_d[1+0-:1] = (M_fa_n != 1'h0);
        M_flag_reg_d[0+0-:1] = (M_fa_s != 16'h2c13);
        M_s_reg_d = M_fa_s;
        if (M_fa_s == 16'h2c13 & M_fa_z == 1'h0 & M_fa_n == 1'h0 & M_fa_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = NPN_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      NPN_testCase: begin
        M_fa_x = 16'hfff0;
        M_fa_y = 16'h0001;
        M_fa_op = 6'h01;
        M_checkoff_reg_d[6+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = (M_fa_z != 1'h0);
        M_flag_reg_d[2+0-:1] = (M_fa_v != 1'h0);
        M_flag_reg_d[1+0-:1] = (M_fa_n != 1'h1);
        M_flag_reg_d[0+0-:1] = (M_fa_s != 16'hffef);
        M_s_reg_d = M_fa_s;
        if (M_fa_s == 16'hffef & M_fa_z == 1'h0 & M_fa_n == 1'h1 & M_fa_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = PP0_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      PP0_testCase: begin
        M_fa_x = 16'hc001;
        M_fa_y = 16'hc001;
        M_fa_op = 6'h01;
        M_checkoff_reg_d[5+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = (M_fa_z != 1'h1);
        M_flag_reg_d[2+0-:1] = (M_fa_v != 1'h0);
        M_flag_reg_d[1+0-:1] = (M_fa_n != 1'h0);
        M_flag_reg_d[0+0-:1] = (M_fa_s != 1'h0);
        M_s_reg_d = M_fa_s;
        if (M_fa_s == 1'h0 & M_fa_z == 1'h1 & M_fa_n == 1'h0 & M_fa_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = NPV_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      NPV_testCase: begin
        M_fa_x = 16'h9f22;
        M_fa_y = 16'h2ff3;
        M_fa_op = 6'h01;
        M_checkoff_reg_d[4+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = (M_fa_z != 1'h0);
        M_flag_reg_d[2+0-:1] = (M_fa_v != 1'h1);
        M_flag_reg_d[1+0-:1] = (M_fa_n != 1'h0);
        M_flag_reg_d[0+0-:1] = (M_fa_s != 16'h6f2f);
        M_s_reg_d = M_fa_s;
        if (M_fa_s == 16'h6f2f & M_fa_z == 1'h0 & M_fa_n == 1'h0 & M_fa_v == 1'h1) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ERR_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ERR_testCase: begin
        M_fa_x = 16'h0001;
        M_fa_y = 16'h0001;
        M_fa_op = 6'h01;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = (M_fa_z != 1'h0);
        M_flag_reg_d[2+0-:1] = (M_fa_v != 1'h1);
        M_flag_reg_d[1+0-:1] = (M_fa_n != 1'h1);
        M_flag_reg_d[0+0-:1] = (M_fa_s != 16'h000f);
        M_s_reg_d = 16'hdead;
        if (M_fa_s == 16'h000f & M_fa_z == 1'h0 & M_fa_n == 1'h1 & M_fa_v == 1'h1) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ERR_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ERROR_STATE_testCase: begin
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = END_testCase;
        end
      end
      END_testCase: begin
        M_flag_reg_d = 8'hff;
        M_checkoff_reg_d = 8'hff;
        M_s_reg_d = 16'hc001;
        s = M_s_reg_q;
        flag = M_flag_reg_q;
        checkoff = M_checkoff_reg_q;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = START_testCase;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_checkoff_reg_q <= 1'h0;
    end else begin
      M_checkoff_reg_q <= M_checkoff_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_testCase_q <= 1'h0;
    end else begin
      M_testCase_q <= M_testCase_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_reg_q <= 1'h0;
    end else begin
      M_s_reg_q <= M_s_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_flag_reg_q <= 1'h0;
    end else begin
      M_flag_reg_q <= M_flag_reg_d;
    end
  end
  
endmodule
