/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module masterTest_4 (
    input clk,
    input rst,
    input [1:0] button,
    input [5:0] alufn,
    output reg [13:0] checkoff,
    output reg [15:0] s,
    output reg [3:0] flag
  );
  
  
  
  wire [1-1:0] M_nextMod_out;
  reg [1-1:0] M_nextMod_in;
  edge_detector_9 nextMod (
    .clk(clk),
    .in(M_nextMod_in),
    .out(M_nextMod_out)
  );
  wire [1-1:0] M_moduleButton_out;
  reg [1-1:0] M_moduleButton_in;
  edge_detector_9 moduleButton (
    .clk(clk),
    .in(M_moduleButton_in),
    .out(M_moduleButton_out)
  );
  reg [13:0] M_checkoff_reg_d, M_checkoff_reg_q = 1'h0;
  reg [3:0] M_flag_reg_d, M_flag_reg_q = 1'h0;
  reg [15:0] M_s_reg_d, M_s_reg_q = 1'h0;
  wire [8-1:0] M_subberTest_checkoff;
  wire [4-1:0] M_subberTest_flag;
  wire [16-1:0] M_subberTest_s;
  reg [1-1:0] M_subberTest_button;
  subberTest_10 subberTest (
    .clk(clk),
    .rst(rst),
    .button(M_subberTest_button),
    .checkoff(M_subberTest_checkoff),
    .flag(M_subberTest_flag),
    .s(M_subberTest_s)
  );
  wire [8-1:0] M_addertest_checkoff;
  wire [4-1:0] M_addertest_flag;
  wire [16-1:0] M_addertest_s;
  reg [1-1:0] M_addertest_button;
  adderTest_11 addertest (
    .clk(clk),
    .rst(rst),
    .button(M_addertest_button),
    .checkoff(M_addertest_checkoff),
    .flag(M_addertest_flag),
    .s(M_addertest_s)
  );
  wire [16-1:0] M_shlTest_out;
  wire [8-1:0] M_shlTest_checkoff;
  wire [1-1:0] M_shlTest_flag;
  wire [16-1:0] M_shlTest_s;
  reg [1-1:0] M_shlTest_button;
  shlTest_12 shlTest (
    .clk(clk),
    .rst(rst),
    .button(M_shlTest_button),
    .out(M_shlTest_out),
    .checkoff(M_shlTest_checkoff),
    .flag(M_shlTest_flag),
    .s(M_shlTest_s)
  );
  wire [16-1:0] M_shrTest_out;
  wire [8-1:0] M_shrTest_checkoff;
  wire [1-1:0] M_shrTest_flag;
  wire [16-1:0] M_shrTest_s;
  reg [1-1:0] M_shrTest_button;
  shrTest_13 shrTest (
    .clk(clk),
    .rst(rst),
    .button(M_shrTest_button),
    .out(M_shrTest_out),
    .checkoff(M_shrTest_checkoff),
    .flag(M_shrTest_flag),
    .s(M_shrTest_s)
  );
  wire [16-1:0] M_sraTest_out;
  wire [8-1:0] M_sraTest_checkoff;
  wire [1-1:0] M_sraTest_flag;
  wire [16-1:0] M_sraTest_s;
  reg [1-1:0] M_sraTest_button;
  sraTest_14 sraTest (
    .clk(clk),
    .rst(rst),
    .button(M_sraTest_button),
    .out(M_sraTest_out),
    .checkoff(M_sraTest_checkoff),
    .flag(M_sraTest_flag),
    .s(M_sraTest_s)
  );
  wire [16-1:0] M_test_mult_out;
  wire [1-1:0] M_test_mult_done;
  wire [1-1:0] M_test_mult_start;
  wire [1-1:0] M_test_mult_error;
  wire [8-1:0] M_test_mult_checkoff;
  reg [1-1:0] M_test_mult_button;
  test_mult_15 test_mult (
    .clk(clk),
    .rst(rst),
    .button(M_test_mult_button),
    .out(M_test_mult_out),
    .done(M_test_mult_done),
    .start(M_test_mult_start),
    .error(M_test_mult_error),
    .checkoff(M_test_mult_checkoff)
  );
  wire [16-1:0] M_booleantest_s;
  wire [6-1:0] M_booleantest_checkoff;
  wire [1-1:0] M_booleantest_flag;
  reg [1-1:0] M_booleantest_button;
  booleantest_16 booleantest (
    .clk(clk),
    .rst(rst),
    .button(M_booleantest_button),
    .s(M_booleantest_s),
    .checkoff(M_booleantest_checkoff),
    .flag(M_booleantest_flag)
  );
  localparam START_selectModCase = 4'd0;
  localparam ADD_selectModCase = 4'd1;
  localparam SUB_selectModCase = 4'd2;
  localparam BOOL_selectModCase = 4'd3;
  localparam SHL_selectModCase = 4'd4;
  localparam SHR_selectModCase = 4'd5;
  localparam SRA_selectModCase = 4'd6;
  localparam MUL_selectModCase = 4'd7;
  localparam ERROR_selectModCase = 4'd8;
  
  reg [3:0] M_selectModCase_d, M_selectModCase_q = START_selectModCase;
  
  always @* begin
    M_selectModCase_d = M_selectModCase_q;
    M_flag_reg_d = M_flag_reg_q;
    M_s_reg_d = M_s_reg_q;
    M_checkoff_reg_d = M_checkoff_reg_q;
    
    M_nextMod_in = button[0+0-:1];
    M_moduleButton_in = button[1+0-:1];
    M_addertest_button = 1'h0;
    M_subberTest_button = 1'h0;
    M_shlTest_button = 1'h0;
    M_shrTest_button = 1'h0;
    M_sraTest_button = 1'h0;
    M_test_mult_button = 1'h0;
    M_booleantest_button = 1'h0;
    if (alufn == 6'h00) begin
      M_addertest_button = M_moduleButton_out;
    end else begin
      if (alufn == 6'h01) begin
        M_subberTest_button = M_moduleButton_out;
      end else begin
        if (alufn == 6'h20) begin
          M_shlTest_button = M_moduleButton_out;
        end else begin
          if (alufn == 6'h21) begin
            M_shrTest_button = M_moduleButton_out;
          end else begin
            if (alufn == 6'h23) begin
              M_sraTest_button = M_moduleButton_out;
            end else begin
              if (alufn == 6'h02) begin
                M_test_mult_button = M_moduleButton_out;
              end else begin
                if (alufn == 6'h18 | alufn == 6'h1e | alufn == 6'h16 | alufn == 14'h2b02) begin
                  M_booleantest_button = M_moduleButton_out;
                end
              end
            end
          end
        end
      end
    end
    s = M_s_reg_q;
    flag = M_flag_reg_q;
    checkoff = M_checkoff_reg_q;
    
    case (M_selectModCase_q)
      START_selectModCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h57a7;
        M_checkoff_reg_d = 16'h0000;
        if (M_nextMod_out == 1'h1 & alufn == 6'h00) begin
          M_selectModCase_d = ADD_selectModCase;
        end else begin
          if (M_nextMod_out == 1'h1 & alufn == 6'h01) begin
            M_selectModCase_d = SUB_selectModCase;
          end else begin
            if (M_nextMod_out == 1'h1 & alufn == 6'h20) begin
              M_selectModCase_d = SHL_selectModCase;
            end else begin
              if (M_nextMod_out == 1'h1 & alufn == 6'h21) begin
                M_selectModCase_d = SHR_selectModCase;
              end else begin
                if (M_nextMod_out == 1'h1 & alufn == 6'h23) begin
                  M_selectModCase_d = SRA_selectModCase;
                end else begin
                  if (M_nextMod_out == 1'h1 & alufn == 6'h02) begin
                    M_selectModCase_d = MUL_selectModCase;
                  end else begin
                    if (M_nextMod_out == 1'h1 & (alufn == 6'h18 | alufn == 6'h1e | alufn == 6'h16 | alufn == 14'h2b02)) begin
                      M_selectModCase_d = BOOL_selectModCase;
                    end
                  end
                end
              end
            end
          end
        end
      end
      ADD_selectModCase: begin
        M_s_reg_d = M_addertest_s;
        M_flag_reg_d[3+0-:1] = M_addertest_flag[0+0-:1];
        M_flag_reg_d[0+2-:3] = M_addertest_flag[1+2-:3];
        M_checkoff_reg_d = M_addertest_checkoff;
      end
      SUB_selectModCase: begin
        M_s_reg_d = M_subberTest_s;
        M_flag_reg_d[3+0-:1] = M_subberTest_flag[0+0-:1];
        M_flag_reg_d[0+2-:3] = M_subberTest_flag[1+2-:3];
        M_checkoff_reg_d = M_subberTest_checkoff;
      end
      SHL_selectModCase: begin
        M_s_reg_d = M_shlTest_s;
        M_flag_reg_d[3+0-:1] = M_shlTest_flag;
        M_checkoff_reg_d = M_shlTest_checkoff;
      end
      SHR_selectModCase: begin
        M_s_reg_d = M_shrTest_s;
        M_flag_reg_d[3+0-:1] = M_shrTest_flag;
        M_checkoff_reg_d = M_shrTest_checkoff;
      end
      SRA_selectModCase: begin
        M_s_reg_d = M_sraTest_s;
        M_flag_reg_d[3+0-:1] = M_sraTest_flag;
        M_checkoff_reg_d = M_sraTest_checkoff;
      end
      MUL_selectModCase: begin
        M_s_reg_d = M_test_mult_out;
        M_flag_reg_d[3+0-:1] = M_test_mult_error;
        M_checkoff_reg_d = M_test_mult_checkoff;
      end
      BOOL_selectModCase: begin
        M_s_reg_d = M_booleantest_s;
        M_flag_reg_d[3+0-:1] = M_booleantest_flag;
        M_checkoff_reg_d = M_booleantest_checkoff;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_reg_q <= 1'h0;
    end else begin
      M_s_reg_q <= M_s_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_selectModCase_q <= 1'h0;
    end else begin
      M_selectModCase_q <= M_selectModCase_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_flag_reg_q <= 1'h0;
    end else begin
      M_flag_reg_q <= M_flag_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_checkoff_reg_q <= 1'h0;
    end else begin
      M_checkoff_reg_q <= M_checkoff_reg_d;
    end
  end
  
endmodule
