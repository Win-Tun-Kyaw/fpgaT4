/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifterTest_11 (
    input clk,
    input rst,
    input button,
    input endbutton,
    output reg [15:0] out,
    output reg [13:0] checkoff,
    output reg [0:0] flag,
    output reg [15:0] s
  );
  
  
  
  wire [16-1:0] M_shift_s;
  reg [16-1:0] M_shift_x;
  reg [16-1:0] M_shift_y;
  reg [6-1:0] M_shift_op;
  shifter16_13 shift (
    .x(M_shift_x),
    .y(M_shift_y),
    .op(M_shift_op),
    .s(M_shift_s)
  );
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_9 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_end_detector_out;
  reg [1-1:0] M_end_detector_in;
  edge_detector_9 end_detector (
    .clk(clk),
    .in(M_end_detector_in),
    .out(M_end_detector_out)
  );
  reg [13:0] M_checkoff_reg_d, M_checkoff_reg_q = 1'h0;
  reg [0:0] M_flag_reg_d, M_flag_reg_q = 1'h0;
  reg [15:0] M_s_reg_d, M_s_reg_q = 1'h0;
  localparam START_testCase = 4'd0;
  localparam LS1_testCase = 4'd1;
  localparam LS2_testCase = 4'd2;
  localparam LS4_testCase = 4'd3;
  localparam LS8_testCase = 4'd4;
  localparam RS1_testCase = 4'd5;
  localparam RS2_testCase = 4'd6;
  localparam RS4_testCase = 4'd7;
  localparam RS8_testCase = 4'd8;
  localparam RSA1_testCase = 4'd9;
  localparam RSA2_testCase = 4'd10;
  localparam RSA4_testCase = 4'd11;
  localparam RSA8_testCase = 4'd12;
  localparam ERR00_testCase = 4'd13;
  localparam END_testCase = 4'd14;
  localparam ERROR_STATE_testCase = 4'd15;
  
  reg [3:0] M_testCase_d, M_testCase_q = START_testCase;
  
  localparam LS1_X = 16'hf001;
  
  localparam LS1_ALUFN = 6'h20;
  
  localparam LS1_Y = 16'h0001;
  
  localparam LS1_S = 16'he002;
  
  localparam LS2_X = 16'hf001;
  
  localparam LS2_ALUFN = 6'h20;
  
  localparam LS2_Y = 16'h0002;
  
  localparam LS2_S = 16'hc004;
  
  localparam LS4_X = 16'hf001;
  
  localparam LS4_ALUFN = 6'h20;
  
  localparam LS4_Y = 16'h0004;
  
  localparam LS4_S = 16'h0010;
  
  localparam LS8_X = 16'hf001;
  
  localparam LS8_ALUFN = 6'h20;
  
  localparam LS8_Y = 16'h0008;
  
  localparam LS8_S = 16'h0100;
  
  localparam RS1_X = 16'hf001;
  
  localparam RS1_ALUFN = 6'h21;
  
  localparam RS1_Y = 16'h0001;
  
  localparam RS1_S = 16'h7800;
  
  localparam RS2_X = 16'hf001;
  
  localparam RS2_ALUFN = 6'h21;
  
  localparam RS2_Y = 16'h0002;
  
  localparam RS2_S = 16'h3c00;
  
  localparam RS4_X = 16'hf001;
  
  localparam RS4_ALUFN = 6'h21;
  
  localparam RS4_Y = 16'h0004;
  
  localparam RS4_S = 16'h0f00;
  
  localparam RS8_X = 16'hf001;
  
  localparam RS8_ALUFN = 6'h21;
  
  localparam RS8_Y = 16'h0008;
  
  localparam RS8_S = 16'h00f0;
  
  localparam RSA1_X = 16'hf001;
  
  localparam RSA1_ALUFN = 6'h23;
  
  localparam RSA1_Y = 16'h0001;
  
  localparam RSA1_S = 16'hf800;
  
  localparam RSA2_X = 16'hf001;
  
  localparam RSA2_ALUFN = 6'h23;
  
  localparam RSA2_Y = 16'h0002;
  
  localparam RSA2_S = 16'hfc00;
  
  localparam RSA4_X = 16'hf001;
  
  localparam RSA4_ALUFN = 6'h23;
  
  localparam RSA4_Y = 16'h0004;
  
  localparam RSA4_S = 16'hff00;
  
  localparam RSA8_X = 16'hf001;
  
  localparam RSA8_ALUFN = 6'h23;
  
  localparam RSA8_Y = 16'h0008;
  
  localparam RSA8_S = 16'hfff0;
  
  localparam ERR00_X = 16'hf001;
  
  localparam ERR00_ALUFN = 6'h20;
  
  localparam ERR00_Y = 16'h0008;
  
  localparam ERR00_S = 16'h0000;
  
  always @* begin
    M_testCase_d = M_testCase_q;
    M_flag_reg_d = M_flag_reg_q;
    M_s_reg_d = M_s_reg_q;
    M_checkoff_reg_d = M_checkoff_reg_q;
    
    checkoff = M_checkoff_reg_q;
    flag = M_flag_reg_q;
    s = M_s_reg_q;
    out = M_s_reg_q;
    M_shift_x = 1'h0;
    M_shift_y = 1'h0;
    M_shift_op = 1'h0;
    M_edge_detector_in = button;
    M_end_detector_in = endbutton;
    
    case (M_testCase_q)
      START_testCase: begin
        flag = 8'h00;
        checkoff = 8'h00;
        s = 16'h51f7;
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h51f7;
        M_checkoff_reg_d = 16'h0000;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = LS1_testCase;
        end
      end
      LS1_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0001;
        M_shift_op = 6'h20;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'he002);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'he002) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = LS2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      LS2_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0002;
        M_shift_op = 6'h20;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'hc004);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'hc004) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = LS4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      LS4_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0004;
        M_shift_op = 6'h20;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h0010);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'h0010) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = LS8_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      LS8_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0008;
        M_shift_op = 6'h20;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h0100);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'h0100) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS1_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS1_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0001;
        M_shift_op = 6'h21;
        M_checkoff_reg_d[4+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h7800);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'h7800) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS2_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0002;
        M_shift_op = 6'h21;
        M_checkoff_reg_d[5+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h3c00);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'h3c00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS4_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0004;
        M_shift_op = 6'h21;
        M_checkoff_reg_d[6+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h0f00);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'h0f00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS8_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS8_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0008;
        M_shift_op = 6'h21;
        M_checkoff_reg_d[7+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h00f0);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'h00f0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA1_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA1_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0001;
        M_shift_op = 6'h23;
        M_checkoff_reg_d[8+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'hf800);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'hf800) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA2_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0002;
        M_shift_op = 6'h23;
        M_checkoff_reg_d[9+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'hfc00);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'hfc00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA4_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0004;
        M_shift_op = 6'h23;
        M_checkoff_reg_d[10+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'hff00);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'hff00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA8_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA8_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0008;
        M_shift_op = 6'h23;
        M_checkoff_reg_d[11+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'hfff0);
        M_s_reg_d = M_shift_s;
        if (M_shift_s == 16'hfff0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ERR00_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ERR00_testCase: begin
        M_shift_x = 16'hf001;
        M_shift_y = 16'h0008;
        M_shift_op = 6'h20;
        M_checkoff_reg_d[12+0-:1] = 1'h1;
        M_flag_reg_d = (M_shift_s != 16'h0000);
        M_s_reg_d = 16'hdead;
        if (M_shift_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = END_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ERROR_STATE_testCase: begin
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = START_testCase;
        end else begin
          if (M_end_detector_out == 1'h1) begin
            M_testCase_d = END_testCase;
          end
        end
      end
      END_testCase: begin
        M_flag_reg_d = 1'h1;
        M_checkoff_reg_d = 14'h3fff;
        M_s_reg_d = 16'hc001;
        s = M_s_reg_q;
        flag = M_flag_reg_q;
        checkoff = M_checkoff_reg_q;
        if (M_edge_detector_out == 1'h1) begin
          
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_testCase_q <= 1'h0;
    end else begin
      M_testCase_q <= M_testCase_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_reg_q <= 1'h0;
    end else begin
      M_s_reg_q <= M_s_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_checkoff_reg_q <= 1'h0;
    end else begin
      M_checkoff_reg_q <= M_checkoff_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_flag_reg_q <= 1'h0;
    end else begin
      M_flag_reg_q <= M_flag_reg_d;
    end
  end
  
endmodule
