module masterTest (
    input clk,  // clock
    input rst,  // reset
    input button,
    input alufn[6], // these are the six left most switch on the left bank
    output checkoff[14],
    output s[16],
    output flag[4]
  ) {
    // declare modules
   .clk(clk) {
      // declare the edge_detectors for buttons
      edge_detector nextMod(#RISE(1), #FALL(0));
      // step counter
    .rst(rst){
      // declare our registers for flags and source and counter
      // output to the right banks of leds
      dff checkoff_reg[14](#INIT(0), .clk(clk), .rst(rst));
      // error state is s correct?
      // output to the middle bank of leds,
      dff flag_reg[4](#INIT(0), .clk(clk), .rst(rst));
      // error s 
      dff s_reg[16](#INIT(0), .clk(clk), .rst(rst));
      // start button is pressed
    

      addertest addertest;      
      shifterTest shifterTest; 
      // declare our fsm
      // how our fsm works 
      fsm selectModCase(#INIT(START),.clk(clk),.rst(rst)) = {START,ADD,SHIFT,END};
    }
  }
 
  always {
    // declare and connect the buttons to inputs.
    nextMod.in = button;        
          
    // connect outputs to the registers 
    s = s_reg.q;
    flag = flag_reg.q;
    checkoff = checkoff_reg.q;
    
    case (selectModCase.q)
    {
        selectModCase.START:
        // we reset all the values to zero, in case we come to start state 
        // from a previous state with flag, checkoff and s values
        flag = 8h00;
        checkoff = 8h00;
        s = 16h57a7;
        flag_reg.d = 8h00;
        s_reg.d = 16h57a7;
        checkoff_reg.d = 16h0000;
        if (nextMod.out == 1 & alufn == b000001) {
          selectModCase.d = selectModCase.ADD;
        }
        else if (nextMod.out == 1 & alufn == b100000) {
          selectModCase.d = selectModCase.SHIFT;
        }
        selectModCase.ADD:
        // connect outputs
        s_reg.d = addertest.s;
        // s flag
        flag_reg.d[3] = addertest.flag[0];
        // z v n flags
        flag_reg.d[2:0] = addertest.flag[3:1];
        // checkoff
        checkoff_reg.d = addertest.checkoff;
        // have we reached end of test cases?
        if (addertest.checkoff == b1111111) {
          if (nextMod.out == 1){
            selectModCase.d = selectModCase.SHIFT;
          }
        }
        selectModCase.SHIFT:
        // connect outputs
        s_reg.d = shifterTest.s;
        // s flag
        flag_reg.d[3] = shifterTest.flag[0];        
        // checkoff
        checkoff_reg.d = shifterTest.checkoff;
        // have we reached the end of the test cases?
        if (addertest.checkoff == 14b11111111111111) {
          if (nextMod.out == 1){
            selectModCase.d = selectModCase.END;
          }
        }
        selectModCase.END:
        // connect outputs
        s_reg.d = 16hc001;
        // s flag
        flag_reg.d[3] = b111;        
        // checkoff
        checkoff_reg.d = 16hffff;
        if (nextMod.out == 1){
          selectModCase.d = selectModCase.START;
        }
    }
  }
}
